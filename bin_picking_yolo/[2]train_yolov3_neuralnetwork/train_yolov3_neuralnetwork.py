# -*- coding: utf-8 -*-
"""Train_yolov3_neuralnetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i5DjeT6c1CB_ftZAsYP_9uxamb_zP4Uz
"""

#Mount my google drive:
from google.colab import drive 
drive.mount('/content/drive')

#Define whether you want to train a tiny or a normal yolo neural network. Training of tiny is much faster (~4 hours)
#0:tiny, 1:normal
YOLO_NETWORKTYPE = 0

#First, let's get some updates
!apt-get update
!apt-get upgrade

#Now here's some important stuff: after long and painful trial and error
#I found that OpenCV can only really be installed through apt-get if you 
#intsall this stuff first , got no idea which libraries are actually useful
#here though, to be frank, but everything works only after this step! =) 


!apt-get install build-essential
!apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev

#And some more...
!apt-get install libavcodec-dev libavformat-dev libswscale-d

!apt-get -y install cmake
!which cmake

!cmake --version

#Installing OpenCV
!apt-get install libopencv-dev

#Now let's clone Darknet fork from AlexeyAB that let's us put in the -dont_show flag
#That turns out to be quite handy, since we've got no display here :D
!git clone https://github.com/AlexeyAB/darknet/

#!cat throws an error on Makefile, so I use !vim to verify whether we 
#actually successfuly modified the Makefile
!apt-get install vim

# Commented out IPython magic to ensure Python compatibility.
#Uncomment !vim line to check the Makefile, beware that you'll need to
#manually puase this cell to move forward

# %cd darknet
#!vim Makefile

#Now let's get some YOLOv3 weights from the official site
!ls
!wget https://pjreddie.com/media/files/yolov3.weights

#No here we're modifying the makefile to set OPENCV and GPU to 1
!ls
!sed -i 's/OPENCV=0/OPENCV=1/g' Makefile
!sed -i 's/GPU=0/GPU=1/g' Makefile

#Uncomment to check whether it worked, needs to be stopped manually 
#!vim Makefile

# Commented out IPython magic to ensure Python compatibility.
#Going to the parent directory
!ls
# %cd ../
!ls

!apt install g++-5
!apt install gcc-5

!update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10
!update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 20
!update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10
!update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 20
!update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30
!update-alternatives --set cc /usr/bin/gcc
!update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30
!update-alternatives --set c++ /usr/bin/g++

#Now, here's a bunch of code that takes the longest to execute here but
#It's about installing CUDA and using the beautiful Tesla K80 GPU, so that
#Will worth it

!apt update -qq;
!wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
!dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
!apt-get update -qq

#Here were are installing compilers and creating some links
!apt-get install cuda -y -qq #gcc-5 g++-5 
#!ln -s /usr/bin/gcc-5 /usr/local/cuda/bin/gcc
#!ln -s /usr/bin/g++-5 /usr/local/cuda/bin/g++
!apt update
!apt upgrade
!apt install cuda-8.0 -y

#Now let's see whether the GPU is here and CUDA was successfully installed!
import tensorflow as tf
device_name = tf.test.gpu_device_name()
print("device name: ", device_name)

print("'sup!'")

!/usr/local/cuda/bin/nvcc --version

# Commented out IPython magic to ensure Python compatibility.
#Okay, if so far no crazy FBI agents are knocking on your doors asking you
#To stop playing with DARKNET we can actually go and !MAKE it

# %cd darknet
!make

!ls
#Now, let's see if everything works by running it on a test image
!./darknet detect cfg/yolov3.cfg yolov3.weights data/person.jpg

# Commented out IPython magic to ensure Python compatibility.
#download files
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#  %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  #plt.rcParams['figure.figsize'] = [10, 5]
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()
  
  
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)
def download(path):
  from google.colab import files
  files.download(path)

#You should see a person, a dog and a horse here and they might even see you.....
imShow('predictions.jpg')

# Commented out IPython magic to ensure Python compatibility.
# %cd data
!ls

# Commented out IPython magic to ensure Python compatibility.
#copy obj.zip  
# %cp '/content/drive/My Drive/Colab Notebooks/datasets_to_oe/obj.zip' '/content/darknet/data'

#Upload the files from local pc to the data folder:
#obj.data
#train.txt
#obj folder with the photos and their text files with bounding boxes
#obj.zip contains these 3 files
#Upload cfg file (make sure that you're in darknet folder)
!ls
#upload()
#and check the results:
#!ls
#Just copy this code and repeat it for as long as you need

# Commented out IPython magic to ensure Python compatibility.
# #Extract the zip file
# %%capture 
# !unzip obj.zip
# #And there you have a folder with your data

# Commented out IPython magic to ensure Python compatibility.
#Go to darknet_master folder
# %cd ../

# Commented out IPython magic to ensure Python compatibility.
#copy the cfg file from our google drive
#tiny network --> normal network (2020.11.15)
if YOLO_NETWORKTYPE == 0:
#   %cp '/content/drive/My Drive/Colab Notebooks/datasets_to_oe/yolov3-tiny-obj.cfg' '/content/darknet'
#   %cp '/content/drive/My Drive/Colab Notebooks/datasets_to_oe/yolov3-tiny-obj_test.cfg' '/content/darknet'
else:
#   %cp '/content/drive/My Drive/Colab Notebooks/datasets_to_oe/yolov3.cfg' '/content/darknet'
#   %cp '/content/drive/My Drive/Colab Notebooks/datasets_to_oe/yolov3_test.cfg' '/content/darknet'

#Upload the weights:
!ls
#yolov3-tiny-obj.cfg
#upload()

#Download yolov3 tiny weights from the official site
#tiny network --> normal network (2020.11.15)
#yolov3-tiny.weights
if YOLO_NETWORKTYPE == 0:
  !wget https://pjreddie.com/media/files/yolov3-tiny.weights
else:
  !wget https://pjreddie.com/media/files/yolov3.weights

#tiny network --> normal network (2020.11.15)
if YOLO_NETWORKTYPE == 0:
  !./darknet partial cfg/yolov3-tiny.cfg yolov3-tiny.weights yolov3-tiny.conv.15 15
else:
  !./darknet partial cfg/yolov3.cfg yolov3.weights yolov3.conv.15 15



#install to hide the output of the code
!pip install -q gwpy

# Commented out IPython magic to ensure Python compatibility.
# #Train the yolo network
# #tiny network --> normal network (2020.11.15)
# #uncomment %%capture for debugging in order to see error message
# %%capture 
# if YOLO_NETWORKTYPE == 0:
#   !./darknet detector train data/obj.data yolov3-tiny-obj.cfg yolov3-tiny.conv.15 -dont_show
# else:
#   !./darknet detector train data/obj.data yolov3.cfg yolov3.conv.15 -dont_show
# 
# #!./darknet detector train build/darknet/x64/data/obj.data build/darknet/x64/yolov3-tiny-obj.cfg yolov3-tiny.conv.15 -dont_show

# Commented out IPython magic to ensure Python compatibility.
#copy backup folder to google drive  
# %cp -r '/content/darknet/backup/.' '/content/drive/My Drive/Colab Notebooks/OutWeights/'
!ls

#Calculate mAP to check overfitting of the last trained yolo weights
if YOLO_NETWORKTYPE == 0:
  !./darknet detector map data/obj.data yolov3-tiny-obj.cfg backup/yolov3-tiny-obj_final.weights
else:
  !./darknet detector map data/obj.data yolov3.cfg backup/yolov3_final.weights

#Calculate mAP to check overfitting of the 6000. trained yolo weights
if YOLO_NETWORKTYPE == 0:
  !./darknet detector map data/obj.data yolov3-tiny-obj.cfg backup/yolov3-tiny-obj_6000.weights
else:
  !./darknet detector map data/obj.data yolov3.cfg backup/yolov3_6000.weights

#Calculate mAP to check overfitting of the 5000. trained yolo weights
if YOLO_NETWORKTYPE == 0:
  !./darknet detector map data/obj.data yolov3-tiny-obj.cfg backup/yolov3-tiny-obj_5000.weights
else:
  !./darknet detector map data/obj.data yolov3.cfg backup/yolov3_5000.weights

#Calculate mAP to check overfitting of the 4000. trained yolo weights
if YOLO_NETWORKTYPE == 0:
  !./darknet detector map data/obj.data yolov3-tiny-obj.cfg backup/yolov3-tiny-obj_4000.weights
else:
  !./darknet detector map data/obj.data yolov3.cfg backup/yolov3_4000.weights

#Calculate mAP to check overfitting of the 3000. trained yolo weights
if YOLO_NETWORKTYPE == 0:
  !./darknet detector map data/obj.data yolov3-tiny-obj.cfg backup/yolov3-tiny-obj_3000.weights
else:
  !./darknet detector map data/obj.data yolov3.cfg backup/yolov3_3000.weights

#Calculate mAP to check overfitting of the 2000. trained yolo weights
if YOLO_NETWORKTYPE == 0:
  !./darknet detector map data/obj.data yolov3-tiny-obj.cfg backup/yolov3-tiny-obj_2000.weights
else:
  !./darknet detector map data/obj.data yolov3.cfg backup/yolov3_2000.weights

#Read first line of test.txt
with open('data/test.txt') as f:
    first_line_testtxt = f.readline()
    first_line_testtxt = first_line_testtxt[:-1]
print(first_line_testtxt)

#Test the last trained yolo weights
#Copy the path of an existing photo from test.txt
if YOLO_NETWORKTYPE == 0:
  # !./darknet detector test data/obj.data yolov3-tiny-obj_test.cfg backup/yolov3-tiny-obj_final.weights first_line_testtxt
  !./darknet detector test data/obj.data yolov3-tiny-obj_test.cfg backup/yolov3-tiny-obj_final.weights data/obj/2020_11_13_20_02_13.jpg
else:
  !./darknet detector test data/obj.data yolov3_test.cfg backup/yolov3_final.weights first_line_testtxt

imShow('predictions.jpg')

#Test the 5000. trained yolo weights
#Copy the path of an existing photo from test.txt
if YOLO_NETWORKTYPE == 0:
  # !./darknet detector test data/obj.data yolov3-tiny-obj_test.cfg backup/yolov3-tiny-obj_5000.weights first_line_testtxt
  !./darknet detector test data/obj.data yolov3-tiny-obj_test.cfg backup/yolov3-tiny-obj_5000.weights data/obj/2020_11_13_20_02_13.jpg
else:
  !./darknet detector test data/obj.data yolov3_test.cfg backup/yolov3_5000.weights first_line_testtxt

imShow('predictions.jpg')

#Test the 4000. trained yolo weights
#Copy the path of an existing photo from test.txt
if YOLO_NETWORKTYPE == 0:
  # !./darknet detector test data/obj.data yolov3-tiny-obj_test.cfg backup/yolov3-tiny-obj_4000.weights first_line_testtxt
  !./darknet detector test data/obj.data yolov3-tiny-obj_test.cfg backup/yolov3-tiny-obj_4000.weights data/obj/2020_11_13_20_02_13.jpg
else:
  !./darknet detector test data/obj.data yolov3_test.cfg backup/yolov3_4000.weights first_line_testtxt

imShow('predictions.jpg')

!ls
#%cd darknet